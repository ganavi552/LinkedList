//method1
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *l1=headA;
        while(l1!=NULL){
            //impt.
            ListNode *l2=headB;
            while(l2!=NULL){
                if(l1==l2)
                    return l2;
                l2=l2->next;
            }
            l1=l1->next;
        }
        return NULL;
    }
};

//method 2
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        unordered_set<ListNode *> s;
        ListNode *l1=headA;
        ListNode *l2=headB;
        
        while(l1!=NULL){
            s.insert(l1);
            l1=l1->next;
        }
        while(l2!=NULL){
            if(s.find(l2)!=s.end()) return l2;
            l2=l2->next;
        }
        return NULL;
    }
};

//method3
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *l1=headA;
        ListNode *l2=headB;
        int c1=0;
        int c2=0;
        while(l1!=NULL || l2!=NULL){
            if(l1!=NULL){
                c1++;
                l1=l1->next;
            }
            if(l2!=NULL){
                c2++;
                l2=l2->next;
            }
        }
        
        int k=c1-c2;
        l1=headA;
        l2=headB;
        if(k>0){
           while(k-- != 0){
               l1=l1->next;
           } 
        }
        else{
            while(k++ != 0){
                l2=l2->next;
            }
        }
        while(l1!=NULL && l2!=NULL ){
            if(l1==l2) return l1;
            l1=l1->next;
            l2=l2->next;
        }
        
        
        
       return NULL;
    }
};

//method 4
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *l1=headA;
        ListNode *l2=headB;
        while(l1!=l2){
           l1=l1==NULL?headB:l1=l1->next;
           l2=l2==NULL?headA:l2=l2->next;
        }
        return l1;
    }
};
