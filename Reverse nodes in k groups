//gfg
class Solution
{
    public:
    struct node *reverse (struct node *head, int k)
    { 
        // Complete this method
        int c=1;
        node *temp=head;
        while(temp->next!=NULL){
           c++;
           temp=temp->next;
        }


        node *dummy=new node(0);
        dummy->next=head;
        node *pre=dummy;
        node *cur;
        node *next1;
       
        while(c>0){
        cur=pre->next;
          next1=cur->next;
            for(int i=1;i<k;i++){
                cur->next=next1->next;
                next1->next=pre->next;
                pre->next=next1;
                next1=cur->next;
                
            }
           pre=cur;
           c-=k;
           if(c<k){
               k=c;
           }
        }
        return dummy->next;
    }
};

//leetcode
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        
        int c=1;
        ListNode *temp=head;
        while(temp->next!=NULL){
           c++;
           temp=temp->next;
        }
        
        ListNode *dummy=new ListNode();
        dummy->next=head;
        ListNode *pre=dummy;
        ListNode *cur;
        ListNode *next1;
       while(c>=k){
        cur=pre->next;
          next1=cur->next;
            for(int i=1;i<k;i++){
                cur->next=next1->next;
                next1->next=pre->next;
                pre->next=next1;
                next1=cur->next;
                
            }
           pre=cur;
           c-=k;
         
        }
        return dummy->next;
    }
};
